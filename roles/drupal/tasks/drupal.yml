---
- name: Set Volumes Object (if code)
  set_fact:
    drupal_volume_mounts:
      - mountPath: "{{ code_pvc_mount_path }}"
        name: drupal-code
    drupal_volumes:
      - name: drupal-code
        persistentVolumeClaim:
          claimName: "{{ code_pvc_name }}"
  when:
    - code_pvc_name is defined
    - code_pvc_mount_path is defined

- name: Set Volumes Object (if not code)
  set_fact:
    drupal_volume_mounts:
      - mountPath: "{{ settings_config_map_mount_path }}"
        name: drupal-settings
      - mountPath: "{{ files_pvc_mount_path }}"
        name: drupal-files
    drupal_volumes:
      - name: drupal-settings
        configMap:
          name: "{{ settings_config_map_name }}"
      - name: drupal-files
        persistentVolumeClaim:
          claimName: "{{ files_pvc_name }}"
  when:
    - code_pvc_name is not defined
    - files_pvc_name is defined
    - files_pvc_mount_path is defined
    - settings_config_map_name is defined
    - settings_config_map_mount_path is defined

- name: Set debugging
  set_fact:
    init_containers_results: {}

- name: Add Volumes to Init containers
  set_fact:
    __new_containers: |-
      {%- set item.volumeMounts = [drupal_volume_mounts] %}
      {{ item }}
  loop: "{{ init_containers | default([]) }}"
  register: init_containers_results
  when: init_containers_with_volumes is defined and init_containers_with_volumes

- debug:
    msg: "{{ init_containers_results.results }}"

- name: Set Drupal Container
  set_fact:
    drupal_container:
      name: drupal
      image: '{{ container_image }}'
      hostname: '{{ ingress_hostname }}'
      command: '{{ container_command | default(omit) }}'
      args: '{{ container_args | default(omit) }}'
      ports:
        - containerPort: '{{ container_port }}'
      livenessProbe:
        tcpSocket:
          port: '{{ container_port }}'
        initialDelaySeconds: 60
      readinessProbe:
        tcpSocket:
          port: '{{ container_port }}'
        initialDelaySeconds: 30
      volumeMounts: "{{ drupal_volume_mounts }}"

- name: Set PHP-FPM Side Car if using php-fpm
  set_fact:
    php_fpm_side_car_spec:
      name: php-fpm
      image: '{{ container_image }}'
      hostname: '{{ ingress_hostname }}'
      command: '{{ php_fpm_side_car_command | default(omit) }}'
      args: '{{ php_fpm_side_car_args | default(omit) }}'
      ports:
        - containerPort: '{{ php_fpm_side_car_port }}'
      livenessProbe:
        tcpSocket:
          port: '{{ php_fpm_side_car_port }}'
        initialDelaySeconds: 60
      readinessProbe:
        tcpSocket:
          port: '{{ php_fpm_side_car_port }}'
        initialDelaySeconds: 30
      volumeMounts: "{{ drupal_volume_mounts }}"
  when:
    - php_fpm_side_car is defined and php_fpm_side_car
    - php_fpm_side_car_port is defined

- name: Drupal Deployment.
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-drupal'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: '{{ container_replicas }}'
        selector:
          matchLabels:
            app: '{{ ansible_operator_meta.name }}-drupal'
        template:
          metadata:
            labels:
              app: '{{ ansible_operator_meta.name }}-drupal'
          spec:
            containers: >
              {%- if php_fpm_side_car is defined and php_fpm_side_car -%}
              {{ [drupal_container, php_fpm_side_car_spec] }}
              {%- else -%}
              {{ [drupal_container] }}
              {%- endif -%}
            initContainers: "{{ init_containers | default(omit) }}"
            volumes: "{{ drupal_volumes }}"

- name: Drupal Service
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        type: NodePort
        ports:
          - port: '{{ container_port }}'
            targetPort: '{{ container_port }}'
        selector:
          app: '{{ ansible_operator_meta.name }}-drupal'

- name: Drupal Ingress
  k8s:
    state: "{{ 'present' if manage_ingress else 'absent' }}"
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        rules:
          - host: '{{ ingress_hostname }}'
            http:
              paths:
                - path: /
                  backend:
                    serviceName: '{{ ansible_operator_meta.name }}'
                    servicePort: '{{ container_port }}'
